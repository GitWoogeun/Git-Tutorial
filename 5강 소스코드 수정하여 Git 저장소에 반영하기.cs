
# 일반적으로 소스코드를 수정하는 것은 두 가지 사례로 나뉘게 됩니다.


# 1. 해당 프로젝트에 소속된 사람이 아닌 경우 ( 시도는 해볼 수 있다. )
만약 우리가 특정한 커뮤니티의 구성원이 아니라서 스스로 커밋을 하여 저장소에 적용할 권한이 없다면,
소스코드를 수정하는 것에 제약이 있습니다. 이런 경우 
PR(Pull Request)를 작성하여 오픈소스에 기여할 수 있습니다.

이 경우는 우리가 큰 오픈소스 프로젝트의 구성원으로 참여하고 싶을 때 사용하는 방법입니다.
PR에 수정 사항 등을 담아서 전송하면, 해당 오픈소스의 관리자가 이를 허용했을 때
실제로 오픈소스에 반영이 될 수 있습니다.;


# 2. 해당 프로젝트에 소속된 사람인 경우
자신이 해당 프로젝트에 대한 권한을 가지고 있으므로 그냥 커밋(Commit)하고,
푸시(Push)해서 저장소에 수정 내역을 반영하면 됩니다.;


# 소스코드 수정하여 Git 저장소에 반영하기
우리는 초바자이므로 2번 케이스를 따라서 우리가 만든 깃 저장소에 수정된 내역을 반영
하는 방법에 대해서 알아보도록 하겠습니다.


# git에 add 된 파일 다시 취소하기
=> git reset 파일명.파일확장자
=> ex) git reset document.txt


# git에 add 된 전체파일 reset 시키기
=> git reset .


# 수정된 내용 무시하기
=> git checkout -- 파일명.파일확장자
=> ex) git checkout -- document.txt


# 커밋 명령어를 잘못 넣었을때 해결 명령어
=> git commit --amend
=> a 를 눌러서 --INSERT--로 변경 ( INSERT로 변경 시 수정 가능 )
=> [Add my_module.py [더하기 & 빼기]]   수정 전
=> [Add my_module.py [Add & Sub]]      수정 후
=> 수정 후 ESC로 저장하고
=> :wq!를 입력해서 amend 빠져나오기
=> 변경 확인 후 git push -f ( 강제 push 하기 ) 일반 push할 시 rejected 오류가 발생!
=> git push -f후 remoteRepository에 가서 commit 메시지 변경 확인하기


# -- amend에서 빠져 나오는 명령어
=> :wq!