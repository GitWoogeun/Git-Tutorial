
깃을 이용하면 하나의 프로젝트를 여러 사람들과 함께 효과적으로 관리하여 협업할 수 있습니다.
실제로 오픈소스를 효과적으로 관리하기 위한 목적으로 깃이 만들어 졌으므로
깃은 실제 프로젝트에 적용하기에 매우 적합합니다.


# 동시 개발
동시에 프로젝트를 작업해야 한다는 점에서 매우 큰 난항을 겪을 수 있습니다.
소스코드를 여러 명이 동시에 보면서, 소스코드를 수정해야 하는데 이러한 작업은
깃(Git)과 같은 협업 관리 도구가 없으면 쉽지 않습니다.;


# 병렬적인 개발
Git은 여러 명이 병렬적으로 개발을 할 수 있게 해준다는 점에서 프로젝트 개발속도를
매우 빠르게 해줍니다. 실제로 리눅스를 포함해서 다양한 오픈소스 프로젝트들은
수천 명이 넘는 개발자가 포함되어 있는데, 이들의 작업 내역을 
어떻게 효과적으로 관리할 수 있는지를 깃을 제대로 배웠을 때 바르게 이해할수 있다.;


# 개발자의 현실적인 장점
개발자의 현실적인 장점은 포토폴리오로관리에도 용이하다는 겁니다.
GitHub에 자신이 작업한 프로젝트를 나열하여 얼마나 주기적으로 프로젝트를 관리하고
있는지 모두 드러나기 때문 입니다.;


# Git을 사용하는 경우
SVN은 각 컴퓨터가 중앙 서버처럼 사용하는 컴퓨터로부터 파일을 다운로드 받아 이용하는 방식이지만,
Git은 중앙서버의 개념이 없으며 중앙 서버처럼 사용하는 컴퓨터가 있다고 하더라도,
그 서버가 망가졌을 때 다른 컴퓨터로부터 소스코드를 복구할 수 있다는 특징이 있습니다.;


# Git의 장점

# 분산적인 개발 :
깃(Git)은 사용하는 전체 개발 내역을 각 개발자의 로컬 컴퓨터로 복사할 수 있습니다.
나중에 서로 수정된 내역을 합치기(Merge)할 수도 있으며, 이 때 Git의 고유한 프로토콜을 이용하게 됩니다.;

# 효율적인 개발 : 
깃(Git)은 일반적인 다른 버전 관리 시스템보다 성능이 뛰어나며, 변경 이력이 많더라도 변경된 내용만
처리 한다는 점에서 메모적인 효율성 또한 뛰어납니다.;

# 비선형적인 개발 :
깃(Git)은  브랜치(Branch)라는 개념이 사용됩니다. 다시 말해서 프로젝트의 가지치기가 가능합니다.
이는 트리 구조, 다시 말해서 비선형적인 구조라고 볼 수 있습니다.;

# 변경 이력 보장 :  최근배포판을 이전버전으로 돌아갈수도 있다.
작업된 모든 내역(Commit 내역)들은 모두 별도의 영역에서 관리되어 
안전하게 프로젝트를 운영할 수 있습니다.;


